// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sd400.proto

package sd400

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CollarRequest_CommandType int32

const (
	CollarRequest_UNKNOWN CollarRequest_CommandType = 0
	CollarRequest_NICK    CollarRequest_CommandType = 1
	CollarRequest_SHOCK   CollarRequest_CommandType = 2
	CollarRequest_BEEP    CollarRequest_CommandType = 3
)

var CollarRequest_CommandType_name = map[int32]string{
	0: "UNKNOWN",
	1: "NICK",
	2: "SHOCK",
	3: "BEEP",
}

var CollarRequest_CommandType_value = map[string]int32{
	"UNKNOWN": 0,
	"NICK":    1,
	"SHOCK":   2,
	"BEEP":    3,
}

func (x CollarRequest_CommandType) String() string {
	return proto.EnumName(CollarRequest_CommandType_name, int32(x))
}

func (CollarRequest_CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e1140dc619105a51, []int{0, 0}
}

type CollarRequest struct {
	Type CollarRequest_CommandType `protobuf:"varint,1,opt,name=type,proto3,enum=sd400.CollarRequest_CommandType" json:"type,omitempty"`
	// Command duration in milliseconds. Ignored for the NICK command.
	DurationMs int32 `protobuf:"varint,2,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// Intensity for NICK and SHOCK commands. Ranges from 0 to 7 inclusive.
	Intensity            int32    `protobuf:"varint,3,opt,name=intensity,proto3" json:"intensity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollarRequest) Reset()         { *m = CollarRequest{} }
func (m *CollarRequest) String() string { return proto.CompactTextString(m) }
func (*CollarRequest) ProtoMessage()    {}
func (*CollarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1140dc619105a51, []int{0}
}

func (m *CollarRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollarRequest.Unmarshal(m, b)
}
func (m *CollarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollarRequest.Marshal(b, m, deterministic)
}
func (m *CollarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollarRequest.Merge(m, src)
}
func (m *CollarRequest) XXX_Size() int {
	return xxx_messageInfo_CollarRequest.Size(m)
}
func (m *CollarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CollarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CollarRequest proto.InternalMessageInfo

func (m *CollarRequest) GetType() CollarRequest_CommandType {
	if m != nil {
		return m.Type
	}
	return CollarRequest_UNKNOWN
}

func (m *CollarRequest) GetDurationMs() int32 {
	if m != nil {
		return m.DurationMs
	}
	return 0
}

func (m *CollarRequest) GetIntensity() int32 {
	if m != nil {
		return m.Intensity
	}
	return 0
}

type CollarResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollarResponse) Reset()         { *m = CollarResponse{} }
func (m *CollarResponse) String() string { return proto.CompactTextString(m) }
func (*CollarResponse) ProtoMessage()    {}
func (*CollarResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1140dc619105a51, []int{1}
}

func (m *CollarResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollarResponse.Unmarshal(m, b)
}
func (m *CollarResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollarResponse.Marshal(b, m, deterministic)
}
func (m *CollarResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollarResponse.Merge(m, src)
}
func (m *CollarResponse) XXX_Size() int {
	return xxx_messageInfo_CollarResponse.Size(m)
}
func (m *CollarResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CollarResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CollarResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("sd400.CollarRequest_CommandType", CollarRequest_CommandType_name, CollarRequest_CommandType_value)
	proto.RegisterType((*CollarRequest)(nil), "sd400.CollarRequest")
	proto.RegisterType((*CollarResponse)(nil), "sd400.CollarResponse")
}

func init() { proto.RegisterFile("sd400.proto", fileDescriptor_e1140dc619105a51) }

var fileDescriptor_e1140dc619105a51 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x4e, 0x31, 0x31,
	0x30, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0xf6, 0x33, 0x72, 0xf1,
	0x3a, 0xe7, 0xe7, 0xe4, 0x24, 0x16, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x99, 0x70,
	0xb1, 0x94, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x19, 0x29, 0xe8, 0x41, 0x34,
	0xa1, 0xa8, 0xd1, 0x73, 0xce, 0xcf, 0xcd, 0x4d, 0xcc, 0x4b, 0x09, 0xa9, 0x2c, 0x48, 0x0d, 0x02,
	0xab, 0x16, 0x92, 0xe7, 0xe2, 0x4e, 0x29, 0x2d, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0x8b, 0xcf, 0x2d,
	0x96, 0x60, 0x52, 0x60, 0xd4, 0x60, 0x0d, 0xe2, 0x82, 0x09, 0xf9, 0x16, 0x0b, 0xc9, 0x70, 0x71,
	0x66, 0xe6, 0x95, 0xa4, 0xe6, 0x15, 0x67, 0x96, 0x54, 0x4a, 0x30, 0x83, 0xa5, 0x11, 0x02, 0x4a,
	0x96, 0x5c, 0xdc, 0x48, 0x66, 0x0a, 0x71, 0x73, 0xb1, 0x87, 0xfa, 0x79, 0xfb, 0xf9, 0x87, 0xfb,
	0x09, 0x30, 0x08, 0x71, 0x70, 0xb1, 0xf8, 0x79, 0x3a, 0x7b, 0x0b, 0x30, 0x0a, 0x71, 0x72, 0xb1,
	0x06, 0x7b, 0xf8, 0x3b, 0x7b, 0x0b, 0x30, 0x81, 0x04, 0x9d, 0x5c, 0x5d, 0x03, 0x04, 0x98, 0x95,
	0x04, 0xb8, 0xf8, 0x60, 0x8e, 0x2b, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x35, 0x72, 0xe3, 0x62, 0x83,
	0x88, 0x08, 0xd9, 0x70, 0x71, 0x07, 0xa7, 0xe6, 0xa5, 0x40, 0x8d, 0x16, 0x12, 0xc1, 0xe6, 0x19,
	0x29, 0x51, 0x34, 0x51, 0x88, 0x29, 0x4a, 0x0c, 0x49, 0x6c, 0xe0, 0x90, 0x32, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xd3, 0x3f, 0xe6, 0x47, 0x38, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CollarClient is the client API for Collar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollarClient interface {
	SendCommand(ctx context.Context, in *CollarRequest, opts ...grpc.CallOption) (*CollarResponse, error)
}

type collarClient struct {
	cc *grpc.ClientConn
}

func NewCollarClient(cc *grpc.ClientConn) CollarClient {
	return &collarClient{cc}
}

func (c *collarClient) SendCommand(ctx context.Context, in *CollarRequest, opts ...grpc.CallOption) (*CollarResponse, error) {
	out := new(CollarResponse)
	err := c.cc.Invoke(ctx, "/sd400.Collar/SendCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollarServer is the server API for Collar service.
type CollarServer interface {
	SendCommand(context.Context, *CollarRequest) (*CollarResponse, error)
}

func RegisterCollarServer(s *grpc.Server, srv CollarServer) {
	s.RegisterService(&_Collar_serviceDesc, srv)
}

func _Collar_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollarServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sd400.Collar/SendCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollarServer).SendCommand(ctx, req.(*CollarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Collar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sd400.Collar",
	HandlerType: (*CollarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommand",
			Handler:    _Collar_SendCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sd400.proto",
}
